{"ast":null,"code":"import _regeneratorRuntime from \"/home/torof/blockchain-developer-bootcamp-final-project/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/torof/blockchain-developer-bootcamp-final-project/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/torof/blockchain-developer-bootcamp-final-project/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/torof/blockchain-developer-bootcamp-final-project/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/torof/blockchain-developer-bootcamp-final-project/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/torof/blockchain-developer-bootcamp-final-project/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/torof/blockchain-developer-bootcamp-final-project/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/torof/blockchain-developer-bootcamp-final-project/client/src/components/pages/Mint.jsx\";\nimport React from 'react';\nimport jsonData from './addresses.json';\nimport \"./styles/Pages.css\";\n\nvar MintPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MintPage, _React$Component);\n\n  function MintPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MintPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MintPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      showMint: \"no\",\n      mintedDixel: null,\n      mintedURI: \"\",\n      freeMintTickets: 0\n    };\n    _this.componentDidMount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState(_this.fetchFreeTickets());\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    _this.random = function (modulus) {\n      var array = new Uint32Array(10);\n      var randArray = window.crypto.getRandomValues(array);\n      var rand1 = Math.floor(Math.random() * 100);\n      var rand2 = randArray[rand1 % randArray.length];\n      return rand2 % modulus;\n    };\n\n    _this.fetchFreeTickets =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var _this$props, getterFacet, accounts, freeMintTickets;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _this$props = _this.props, getterFacet = _this$props.getterFacet, accounts = _this$props.accounts;\n              _context2.next = 3;\n              return getterFacet.methods.returnFreeMintTickets().call({\n                from: accounts[0]\n              });\n\n            case 3:\n              freeMintTickets = _context2.sent;\n\n              _this.setState({\n                freeMintTickets: freeMintTickets\n              });\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    _this.mintDixel =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(choice) {\n        var _this$props2, getterFacet, dixelFacet, accounts, dixels, addressesArray, commonAvailable, uncommonAvailable, rareAvailable, legendaryAvailable, dixel, currentPrice, commonChoice, uncommonChoice, rareChoice, legendaryChoice, jsonURI, jsonPage;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _this$props2 = _this.props, getterFacet = _this$props2.getterFacet, dixelFacet = _this$props2.dixelFacet, accounts = _this$props2.accounts;\n\n                _this.setState({\n                  showMint: \"loading\"\n                });\n\n                _context4.next = 4;\n                return getterFacet.methods.getDixels().call();\n\n              case 4:\n                dixels = _context4.sent;\n                addressesArray = [];\n                commonAvailable = jsonData.common;\n                uncommonAvailable = jsonData.uncommon;\n                rareAvailable = jsonData.rare;\n                legendaryAvailable = jsonData.legendary;\n                dixels.forEach(function (e) {\n                  if (Number(e.rarity) === 1) {\n                    for (var i = 0; i < jsonData.common.length; i++) {\n                      if (jsonData.common[i][0] === e.URI) {\n                        commonAvailable.splice(i, 1);\n                      }\n                    }\n                  }\n\n                  if (Number(e.rarity) === 2) {\n                    for (var _i = 0; _i < jsonData.uncommon.length; _i++) {\n                      if (jsonData.uncommon[_i][0] === e.URI) {\n                        uncommonAvailable.splice(_i, 1);\n                      }\n                    }\n                  }\n\n                  if (Number(e.rarity) === 3) {\n                    for (var _i2 = 0; _i2 < jsonData.rare.length; _i2++) {\n                      if (jsonData.rare[_i2][0] === e.URI) {\n                        rareAvailable.splice(_i2, 1);\n                      }\n                    }\n                  }\n\n                  if (Number(e.rarity) === 4) {\n                    for (var _i3 = 0; _i3 < jsonData.legendary.length; _i3++) {\n                      if (jsonData.legendary[_i3][0] === e.URI) {\n                        legendaryAvailable.splice(_i3, 1);\n                      }\n                    }\n                  }\n                });\n                _context4.next = 13;\n                return dixelFacet.methods.getDixelPrice().call();\n\n              case 13:\n                currentPrice = _context4.sent;\n                commonChoice = _this.random(commonAvailable.length);\n                uncommonChoice = _this.random(uncommonAvailable.length);\n                rareChoice = _this.random(rareAvailable.length);\n                legendaryChoice = _this.random(legendaryAvailable.length);\n                addressesArray.push(commonAvailable[commonChoice], uncommonAvailable[uncommonChoice], rareAvailable[rareChoice], legendaryAvailable[legendaryChoice]);\n\n                if (!(choice === 1)) {\n                  _context4.next = 24;\n                  break;\n                }\n\n                _context4.next = 22;\n                return dixelFacet.methods.mintDixel(addressesArray).send({\n                  from: accounts[0],\n                  value: currentPrice\n                }).on(\"receipt\", function (receipt) {\n                  dixel = receipt.events.DixelMinted.returnValues._dixel;\n                }).catch(function (error) {\n                  _this.setState({\n                    showMint: \"no\"\n                  });\n\n                  if (error.code === 4001) {\n                    return alert(\"transaction rejected\");\n                  } else if (error.code === -32603) {\n                    if (error.message.includes(\"Mint ended\")) {\n                      return alert(\"The sale has ended !\");\n                    } else return alert(\"internal error\");\n                  } else {\n                    console.log(error);\n                  }\n                });\n\n              case 22:\n                _context4.next = 32;\n                break;\n\n              case 24:\n                if (!(choice === 2)) {\n                  _context4.next = 32;\n                  break;\n                }\n\n                if (!(Number(_this.state.freeMintTickets) === 0)) {\n                  _context4.next = 28;\n                  break;\n                }\n\n                _this.setState({\n                  showMint: \"no\"\n                });\n\n                return _context4.abrupt(\"return\", alert(\"You don't have tickets\"));\n\n              case 28:\n                _context4.next = 30;\n                return dixelFacet.methods.mintFreeDixel(addressesArray).send({\n                  from: accounts[0]\n                }).on(\"receipt\", function (receipt) {\n                  dixel = receipt.events.DixelMinted.returnValues._dixel;\n                }).catch(function (error) {\n                  _this.setState({\n                    showMint: \"no\"\n                  });\n\n                  if (error.code === 4001) {\n                    return alert(\"transaction rejected\");\n                  } else if (error.code === -32603) {\n                    if (error.message.includes(\"no tickets\")) {\n                      return alert(\"you don't have a ticket\");\n                    } else {\n                      return alert(\"internal error\");\n                    }\n                  } else console.log(error);\n                });\n\n              case 30:\n                _context4.next = 32;\n                return _this.fetchFreeTickets();\n\n              case 32:\n                if (!(dixel !== undefined)) {\n                  _context4.next = 39;\n                  break;\n                }\n\n                jsonURI = dixel.URI;\n                _context4.next = 36;\n                return fetch(\"https://ipfs.io/ipfs/\".concat(jsonURI)).then(\n                /*#__PURE__*/\n                function () {\n                  var _ref4 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee3(response) {\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            _context3.next = 2;\n                            return response.json();\n\n                          case 2:\n                            return _context3.abrupt(\"return\", jsonPage = _context3.sent);\n\n                          case 3:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }));\n\n                  return function (_x2) {\n                    return _ref4.apply(this, arguments);\n                  };\n                }());\n\n              case 36:\n                _this.setState({\n                  mintedDixel: dixel,\n                  showMint: \"yes\",\n                  imageURI: jsonPage.image\n                });\n\n                _context4.next = 40;\n                break;\n\n              case 39:\n                console.log(\"no dixel found\");\n\n              case 40:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(MintPage, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var image;\n      if (this.state.showMint === \"no\") image = null;\n      if (this.state.showMint === \"loading\") image = React.createElement(\"img\", {\n        src: \"https://ipfs.io/ipfs/QmYeQUra7rkT4KMdV4KwSk51KxkkDuBG1Tm5R96zR2FxQj\",\n        alt: \"loading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      });\n      if (this.state.showMint === \"yes\") image = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: this.state.imageURI,\n        alt: \"Dixel.png\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, \"rarity:  \", this.state.mintedDixel.rarity));\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \" Minting page \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, \"free mint tickets: \", this.state.freeMintTickets), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, image), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.mintDixel(1);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, \"Mint\"), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.mintDixel(2);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, \"Mint with ticket\")));\n    }\n  }]);\n\n  return MintPage;\n}(React.Component);\n\nexport { MintPage as default };","map":{"version":3,"sources":["/home/torof/blockchain-developer-bootcamp-final-project/client/src/components/pages/Mint.jsx"],"names":["React","jsonData","MintPage","state","showMint","mintedDixel","mintedURI","freeMintTickets","componentDidMount","setState","fetchFreeTickets","random","modulus","array","Uint32Array","randArray","window","crypto","getRandomValues","rand1","Math","floor","rand2","length","props","getterFacet","accounts","methods","returnFreeMintTickets","call","from","mintDixel","choice","dixelFacet","getDixels","dixels","addressesArray","commonAvailable","common","uncommonAvailable","uncommon","rareAvailable","rare","legendaryAvailable","legendary","forEach","e","Number","rarity","i","URI","splice","getDixelPrice","currentPrice","commonChoice","uncommonChoice","rareChoice","legendaryChoice","push","send","value","on","receipt","dixel","events","DixelMinted","returnValues","_dixel","catch","error","code","alert","message","includes","console","log","mintFreeDixel","undefined","jsonURI","fetch","then","response","json","jsonPage","imageURI","image","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport jsonData from './addresses.json'\nimport \"./styles/Pages.css\"\n\nexport default class MintPage extends React.Component {\n        state = {\n            showMint: \"no\",\n            mintedDixel: null,\n            mintedURI: \"\",\n            freeMintTickets: 0\n        }\n\n        componentDidMount = async () => {\n            this.setState(this.fetchFreeTickets())\n        }\n\n        random = (modulus) => {\n            let array = new Uint32Array(10);\n            let randArray = window.crypto.getRandomValues(array);\n            let rand1 = Math.floor(Math.random() * 100)\n            let rand2 = randArray[rand1 % randArray.length]\n            return rand2 % modulus\n        }\n\n        fetchFreeTickets = async () => {\n            const {\n                getterFacet,\n                accounts\n            } = this.props;\n\n            let freeMintTickets = await getterFacet.methods.returnFreeMintTickets().call({\n                from: accounts[0]\n            })\n\n            this.setState({\n                freeMintTickets\n            })\n        }\n\n        mintDixel = async (choice) => {\n            const {\n                getterFacet,\n                dixelFacet,\n                accounts\n            } = this.props;\n            this.setState({\n                showMint: \"loading\"\n            })\n            let dixels = await getterFacet.methods.getDixels().call();\n            let addressesArray = []\n            let commonAvailable = jsonData.common;\n            let uncommonAvailable = jsonData.uncommon;\n            let rareAvailable = jsonData.rare;\n            let legendaryAvailable = jsonData.legendary;\n\n            dixels.forEach(e => {\n                if (Number(e.rarity) === 1) {\n                    for (let i = 0; i < jsonData.common.length; i++) {\n                        if (jsonData.common[i][0] === e.URI) {\n                            commonAvailable.splice(i, 1)\n                        }\n                    }\n                }\n                if (Number(e.rarity) === 2) {\n                    for (let i = 0; i < jsonData.uncommon.length; i++) {\n                        if (jsonData.uncommon[i][0] === e.URI) {\n                            uncommonAvailable.splice(i, 1)\n                        }\n                    }\n                }\n                if (Number(e.rarity) === 3) {\n                    for (let i = 0; i < jsonData.rare.length; i++) {\n                        if (jsonData.rare[i][0] === e.URI) {\n                            rareAvailable.splice(i, 1)\n                        }\n                    }\n                }\n                if (Number(e.rarity) === 4) {\n                    for (let i = 0; i < jsonData.legendary.length; i++) {\n                        if (jsonData.legendary[i][0] === e.URI) {\n                            legendaryAvailable.splice(i, 1)\n                        }\n                    }\n                }\n            })\n\n            let dixel;\n            let currentPrice = await dixelFacet.methods.getDixelPrice().call();\n            let commonChoice = this.random(commonAvailable.length)\n            let uncommonChoice = this.random(uncommonAvailable.length)\n            let rareChoice = this.random(rareAvailable.length)\n            let legendaryChoice = this.random(legendaryAvailable.length)\n            addressesArray.push(commonAvailable[commonChoice], uncommonAvailable[uncommonChoice], rareAvailable[rareChoice], legendaryAvailable[legendaryChoice])\n            \n            if (choice === 1) {\n                await dixelFacet.methods.mintDixel(addressesArray).send({\n                        from: accounts[0],\n                        value: currentPrice\n                    })\n                    .on(\"receipt\", (receipt) => {\n                        dixel = receipt.events.DixelMinted.returnValues._dixel  \n                    })\n                    .catch((error) => {\n                        this.setState({\n                            showMint: \"no\"\n                        })\n                        if (error.code === 4001) {\n                            return alert(\"transaction rejected\")\n                        } else if (error.code === -32603) {\n                            if (error.message.includes(\"Mint ended\")) {\n                                return alert(\"The sale has ended !\")\n                            }\n                            else return alert(\"internal error\")\n                        } else {\n                            console.log(error)\n                        }\n                    })\n            } else if (choice === 2) {\n                if(Number(this.state.freeMintTickets) === 0){\n                    this.setState({showMint: \"no\"})\n                    return alert(\"You don't have tickets\")\n                }\n                await dixelFacet.methods.mintFreeDixel(addressesArray).send({\n                        from: accounts[0]\n                    })\n                    .on(\"receipt\", (receipt) => {\n                        dixel = receipt.events.DixelMinted.returnValues._dixel\n                    })\n                    .catch((error) => {\n                        this.setState({\n                            showMint: \"no\"\n                        })\n                        if (error.code === 4001) {\n                            return alert(\"transaction rejected\")\n                        } else if (error.code === -32603) {\n                            if (error.message.includes(\"no tickets\")) {\n                                return alert(\"you don't have a ticket\")\n                            } else {\n                                return alert(\"internal error\")\n                            }\n                        } else console.log(error)\n                    })\n                    await this.fetchFreeTickets()\n            }\n            if (dixel !== undefined){\n            let jsonURI = dixel.URI\n            let jsonPage;\n            await fetch(`https://ipfs.io/ipfs/${jsonURI}`)\n            .then(async response => jsonPage = await response.json())\n            \n            this.setState({\n                mintedDixel: dixel,\n                showMint: \"yes\",\n                imageURI: jsonPage.image\n            })\n            } else {console.log(\"no dixel found\")}\n        };\n\n    render() {\n        let image;\n        if(this.state.showMint === \"no\") image = null;\n        if(this.state.showMint === \"loading\") image = <img src=\"https://ipfs.io/ipfs/QmYeQUra7rkT4KMdV4KwSk51KxkkDuBG1Tm5R96zR2FxQj\" alt=\"loading\"/>;\n        if(this.state.showMint === \"yes\") image = <div>\n        <img src={this.state.imageURI} alt=\"Dixel.png\" />\n        <p>rarity:  {this.state.mintedDixel.rarity}\n        </p>\n\n    </div>;\n        return (\n            <div>\n                <h1> Minting page </h1>\n                <p>free mint tickets: {this.state.freeMintTickets}</p>\n                <div>{image}</div>\n                <div>\n                    <button onClick={() => this.mintDixel(1)}>Mint</button>\n                    <button onClick={() => this.mintDixel(2)}>Mint with ticket</button>\n                </div>\n                \n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}