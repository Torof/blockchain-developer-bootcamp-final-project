{"ast":null,"code":"import _regeneratorRuntime from \"/home/torof/blockchain-developer-bootcamp-final-project/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/torof/blockchain-developer-bootcamp-final-project/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/torof/blockchain-developer-bootcamp-final-project/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/torof/blockchain-developer-bootcamp-final-project/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/torof/blockchain-developer-bootcamp-final-project/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/torof/blockchain-developer-bootcamp-final-project/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/torof/blockchain-developer-bootcamp-final-project/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/torof/blockchain-developer-bootcamp-final-project/client/src/components/pages/Stake.jsx\";\nimport React from 'react';\nimport \"./styles/Pages.css\";\n\nvar StakingPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StakingPage, _React$Component);\n\n  function StakingPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StakingPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StakingPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      stakedDixels: [],\n      unStakedDixels: [],\n      userStarmBalance: 0\n    };\n\n    _this.componentDidMount = function () {\n      _this.setState(_this.updateAll());\n    };\n\n    _this.componentWillUnmount = function () {\n      _this.setState({\n        stakedDixels: [],\n        unStakedDixels: [],\n        userStarmBalance: 0\n      });\n    };\n\n    _this.updateAll =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var _this$props, lotteryFacet, getterFacet, dixelFacet, accounts, starmBalance, dixels, length, userDixels, stakedDixels, unStakedDixels, i, obj, jsonPage;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _this$props = _this.props, lotteryFacet = _this$props.lotteryFacet, getterFacet = _this$props.getterFacet, dixelFacet = _this$props.dixelFacet, accounts = _this$props.accounts;\n              _context2.next = 3;\n              return lotteryFacet.methods.balanceOfStarm(accounts[0]).call();\n\n            case 3:\n              starmBalance = _context2.sent;\n              _context2.next = 6;\n              return getterFacet.methods.getDixels().call();\n\n            case 6:\n              dixels = _context2.sent;\n              length = dixels.length;\n              userDixels = [];\n              stakedDixels = [];\n              unStakedDixels = [];\n              i = 0;\n\n            case 12:\n              if (!(i <= length - 1)) {\n                _context2.next = 30;\n                break;\n              }\n\n              _context2.next = 15;\n              return dixelFacet.methods.ownerOf(i).call();\n\n            case 15:\n              _context2.t0 = _context2.sent;\n              _context2.t1 = accounts[0];\n\n              if (!(_context2.t0 === _context2.t1)) {\n                _context2.next = 27;\n                break;\n              }\n\n              obj = {};\n              jsonPage = void 0;\n              obj.dixel = dixels[i];\n              obj.id = i;\n              _context2.next = 24;\n              return fetch(\"https://ipfs.io/ipfs/\".concat(obj.dixel.URI)).then(\n              /*#__PURE__*/\n              function () {\n                var _ref2 = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee(response) {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return response.json();\n\n                        case 2:\n                          return _context.abrupt(\"return\", jsonPage = _context.sent);\n\n                        case 3:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }());\n\n            case 24:\n              obj.imageURI = jsonPage.image;\n              obj.dixelTraits = jsonPage.attributes;\n              userDixels.push(obj);\n\n            case 27:\n              i++;\n              _context2.next = 12;\n              break;\n\n            case 30:\n              unStakedDixels = userDixels.filter(function (obj) {\n                return obj.dixel.staked === false;\n              });\n              stakedDixels = userDixels.filter(function (obj) {\n                return obj.dixel.staked === true;\n              });\n\n              _this.setState({\n                stakedDixels: stakedDixels,\n                unStakedDixels: unStakedDixels,\n                userStarmBalance: starmBalance\n              });\n\n            case 33:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    _this.stakeDixel =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(value) {\n        var _this$props2, dixelFacet, accounts;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this$props2 = _this.props, dixelFacet = _this$props2.dixelFacet, accounts = _this$props2.accounts;\n                _context3.next = 3;\n                return dixelFacet.methods.stakeDix(value).send({\n                  from: accounts[0]\n                }).catch(function (error) {\n                  if (error.code === 4001) {\n                    return alert(\"transaction rejected\");\n                  } else if (error.code === -32603) {\n                    if (error.message.includes(\"staking\")) {\n                      return alert(\"This dixel is already staked !\");\n                    }\n                  } else {\n                    return alert(\"internal error\");\n                  }\n                });\n\n              case 3:\n                _context3.next = 5;\n                return _this.updateAll();\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.unStakeDixel =\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(value) {\n        var _this$props3, dixelFacet, accounts;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _this$props3 = _this.props, dixelFacet = _this$props3.dixelFacet, accounts = _this$props3.accounts;\n                _context4.next = 3;\n                return dixelFacet.methods.unStakeDix(value).send({\n                  from: accounts[0]\n                }).catch(function (error) {\n                  if (error.code === 4001) {\n                    return alert(\"transaction rejected\");\n                  } else if (error.code === -32603) {\n                    if (error.message.includes(\"not staked\")) {\n                      return alert(\"This dixel isn't staked !\");\n                    }\n                  } else {\n                    return alert(\"internal error\");\n                  }\n                });\n\n              case 3:\n                _context4.next = 5;\n                return _this.updateAll();\n\n              case 5:\n                _this.setState(_this.updateAll());\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    _this.levelUpDixel =\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(value) {\n        var _this$props4, dixelFacet, accounts;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _this$props4 = _this.props, dixelFacet = _this$props4.dixelFacet, accounts = _this$props4.accounts;\n                _context5.next = 3;\n                return dixelFacet.methods.levelUp(value).send({\n                  from: accounts[0]\n                }).catch(function (error) {\n                  if (error.code === 4001) {\n                    return alert(\"transaction rejected\");\n                  } else if (error.code === -32603) {\n                    if (error.message.includes(\"max lvl\")) {\n                      return alert(\"This this dixel is already at the maximul level !\");\n                    } else if (error.message.includes(\"limit reached\")) {\n                      return alert(\"All the collectors have been minted :'(\");\n                    }\n                  } else {\n                    return alert(\"internal error\");\n                  }\n                });\n\n              case 3:\n                _context5.next = 5;\n                return _this.updateAll();\n\n              case 5:\n                _this.setState(_this.updateAll());\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(StakingPage, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"Starm balance: \", this.state.userStarmBalance), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \"unstaked Dixels :\"), React.createElement(\"div\", {\n        className: \"card-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, this.state.unStakedDixels.map(function (obj, i) {\n        return React.createElement(\"div\", {\n          key: i,\n          className: \"card\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"space-b card-list\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }, \"rarity: \", obj.dixel.rarity), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, \"level: \", obj.dixel.level)), React.createElement(\"img\", {\n          src: obj.imageURI,\n          className: \"image\",\n          alt: \"dixel.png\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          onClick: function onClick() {\n            return _this2.stakeDixel(_this2.state.unStakedDixels[i].id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        }, \"Stake\"), React.createElement(\"button\", {\n          onClick: function onClick() {\n            return _this2.levelUpDixel(obj.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, \"level up\")));\n      }))), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"Staked Dixels :\"), React.createElement(\"div\", {\n        className: \"card-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, this.state.stakedDixels.map(function (obj, i) {\n        return React.createElement(\"div\", {\n          key: i,\n          className: \"card\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"card-list space-b\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }, \"rarity: \", obj.dixel.rarity), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }, \"level: \", obj.dixel.level)), React.createElement(\"img\", {\n          src: obj.imageURI,\n          className: \"image\",\n          alt: \"dixel.png\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }, \"starm to withdraw :  \", (Math.round(new Date().getTime() / 1000) - obj.dixel.stakeInitTime) * obj.dixel.rarity * obj.dixel.level), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          onClick: function onClick() {\n            return _this2.unStakeDixel(_this2.state.stakedDixels[i].id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }, \"Unstake\")));\n      })));\n    }\n  }]);\n\n  return StakingPage;\n}(React.Component);\n\nexport { StakingPage as default };","map":{"version":3,"sources":["/home/torof/blockchain-developer-bootcamp-final-project/client/src/components/pages/Stake.jsx"],"names":["React","StakingPage","state","stakedDixels","unStakedDixels","userStarmBalance","componentDidMount","setState","updateAll","componentWillUnmount","props","lotteryFacet","getterFacet","dixelFacet","accounts","methods","balanceOfStarm","call","starmBalance","getDixels","dixels","length","userDixels","i","ownerOf","obj","jsonPage","dixel","id","fetch","URI","then","response","json","imageURI","image","dixelTraits","attributes","push","filter","staked","stakeDixel","value","stakeDix","send","from","catch","error","code","alert","message","includes","unStakeDixel","unStakeDix","levelUpDixel","levelUp","map","rarity","level","Math","round","Date","getTime","stakeInitTime","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport \"./styles/Pages.css\"\n\nexport default class StakingPage extends React.Component {\n    state = { stakedDixels: [], unStakedDixels: [], userStarmBalance: 0 }\n\n    componentDidMount = () => {\n        this.setState(this.updateAll());\n    }\n\n    componentWillUnmount = () => {\n        this.setState({\n            stakedDixels: [], \n            unStakedDixels: [], \n            userStarmBalance: 0\n        })\n    }\n    updateAll = async () => {\n        const { lotteryFacet, getterFacet, dixelFacet, accounts } = this.props;\n        let starmBalance = await lotteryFacet.methods.balanceOfStarm(accounts[0]).call();\n        let dixels = await getterFacet.methods.getDixels().call();\n        let length = dixels.length;\n        let userDixels = [];\n        let stakedDixels = []\n        let unStakedDixels = []\n\n        for (let i = 0; i <= length - 1; i++) {\n            if ((await dixelFacet.methods.ownerOf(i).call()) === accounts[0]) {\n                let obj = {}\n                let jsonPage\n                obj.dixel = dixels[i]\n                obj.id = i;\n                await fetch(`https://ipfs.io/ipfs/${obj.dixel.URI}`)\n                .then(async response => jsonPage = await response.json())\n                obj.imageURI = jsonPage.image\n                obj.dixelTraits = jsonPage.attributes\n                userDixels.push(obj);\n            }\n\n        }\n        unStakedDixels = userDixels.filter(obj => obj.dixel.staked === false)\n        stakedDixels = userDixels.filter(obj => obj.dixel.staked === true)\n\n        this.setState({ stakedDixels: stakedDixels, unStakedDixels: unStakedDixels, userStarmBalance: starmBalance });\n    };\n\n\n\n    stakeDixel = async (value) => {\n        let { dixelFacet, accounts } = this.props;\n        await dixelFacet.methods.stakeDix(value).send({ from: accounts[0] }).catch((error) => {\n            if (error.code === 4001) {\n                return alert(\"transaction rejected\")\n            } else if (error.code === -32603) {\n                if (error.message.includes(\"staking\")) {\n                    return alert(\"This dixel is already staked !\")\n                }\n            } else {\n                return alert(\"internal error\")\n            }\n        })\n        await this.updateAll()\n    }\n\n    unStakeDixel = async (value) => {\n        let { dixelFacet, accounts } = this.props;\n        await dixelFacet.methods.unStakeDix(value).send({ from: accounts[0] })\n        .catch((error) => {\n            if (error.code === 4001) {\n                return alert(\"transaction rejected\")\n            } else if (error.code === -32603) {\n                if (error.message.includes(\"not staked\")) {\n                    return alert(\"This dixel isn't staked !\")\n                }\n            } else {\n            return alert(\"internal error\")\n            }\n        })\n        await this.updateAll()\n        this.setState(this.updateAll())\n    }\n\n    levelUpDixel = async (value) => {\n        const { dixelFacet, accounts } = this.props;\n\n        await dixelFacet.methods.levelUp(value).send({ from: accounts[0] })\n        .catch((error) => {\n            if (error.code === 4001) {\n                return alert(\"transaction rejected\")\n            } else if (error.code === -32603) {\n                if (error.message.includes(\"max lvl\")) {\n                    return alert(\"This this dixel is already at the maximul level !\")\n                } else if (error.message.includes(\"limit reached\")) {\n                    return alert(\"All the collectors have been minted :'(\")\n                }\n            } else {\n                return alert(\"internal error\")\n            }\n        })\n        await this.updateAll()\n        this.setState(this.updateAll())\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    Starm balance: {this.state.userStarmBalance}\n                </div>\n                <div>\n                <p>unstaked Dixels :</p>\n                <div className=\"card-list\">\n                {this.state.unStakedDixels.map((obj, i) => <div key={i} className=\"card\">\n                    <div className={\"space-b card-list\"}>\n                    <div>rarity: {obj.dixel.rarity}</div>\n                    <div >level: {obj.dixel.level}</div>\n                    </div>\n                    \n                    <img src={obj.imageURI} className=\"image\" alt=\"dixel.png\" />\n                    <div>\n                    <button onClick={() => this.stakeDixel(this.state.unStakedDixels[i].id)}>Stake</button>\n                    <button onClick={() => this.levelUpDixel(obj.id)}>level up</button>\n                    </div>\n                    \n                </div>)}\n                </div>\n                </div>\n                <p>Staked Dixels :</p>\n                <div className=\"card-list\">\n                    \n                {this.state.stakedDixels.map((obj, i) => <div key={i} className=\"card\">\n                    <div className=\"card-list space-b\">\n                    <div>rarity: {obj.dixel.rarity}</div>\n                    <div >level: {obj.dixel.level}</div>\n                    </div>\n                    <img src={obj.imageURI} className=\"image\" alt=\"dixel.png\" />\n                    <p>starm to withdraw :  {(Math.round(new Date().getTime()/ 1000) - obj.dixel.stakeInitTime)* obj.dixel.rarity * obj.dixel.level}</p>\n                    <div>\n                    <button onClick={() => this.unStakeDixel(this.state.stakedDixels[i].id)}>Unstake</button>\n                    </div>\n                </div>)}\n                </div>\n\n                \n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}