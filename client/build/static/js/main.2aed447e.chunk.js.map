{"version":3,"sources":["getWeb3.js","components/pages/Home.jsx","components/pages/Mint.jsx","components/pages/Stake.jsx","components/pages/Lottery.jsx","components/pages/Inventory.jsx","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","request","method","console","log","provider","providers","HttpProvider","Home","state","supplies","componentDidMount","props","dixelFacet","accounts","methods","returnSupplies","call","result","account","setState","this","React","Component","MintPage","showMint","mintedDixel","mintedURI","freeMintTickets","fetchFreeTickets","random","modulus","array","Uint32Array","randArray","crypto","getRandomValues","Math","floor","length","lotteryFacet","returnFreeMintTickets","from","mintDixel","choice","getDixels","dixels","addressesArray","commonAvailable","jsonData","common","uncommonAvailable","uncommon","rareAvailable","rare","legendaryAvailable","legendary","forEach","e","Number","rarity","i","URI","splice","getDixelPrice","currentPrice","commonChoice","uncommonChoice","rareChoice","legendaryChoice","push","send","value","on","receipt","dixel","events","DixelMinted","returnValues","_dixel","catch","error","code","alert","message","includes","mintFreeDixel","undefined","jsonURI","fetch","then","response","json","jsonPage","imageURI","image","src","alt","onClick","StakingPage","stakedDixels","unStakedDixels","userStarmBalance","updateAll","componentWillUnmount","balanceOfStarm","starmBalance","userDixels","ownerOf","obj","id","dixelTraits","attributes","filter","staked","stakeDixel","stakeDix","unStakeDixel","unStakeDix","levelUpDixel","levelUp","className","map","key","level","round","Date","getTime","stakeInitTime","LotteryPage","dailyWinners","userDixelTickets","userStarmToWithdraw","userLotteryTickets","registeredTickets","returnLotteryWinners","returnLotteryTickets","lotteryTickets","dixelTickets","returnRegisteredTickets","returnStarmWon","starmToWithdraw","buyTickets","amount","buyTicket","registerForLottery","startLottery","handleChange","event","target","withdrawStarm","withdrawLotteryStarm","StarmClaimed","numTickets","onChange","slice","timestamp","dixelMintWinner","starmWinner","InventoryAndLevel","show","fetchUserDixels","filteredDixels","Boolean","displayAttributes","attr","handleMouseEnter","style","cursor","onMouseEnter","toString","App","contract","eth","getAccounts","location","reload","net","getId","networkId","deployedNetwork","DiamondContract","networks","dixelFacetInstance","Contract","DixelFacet","abi","address","lotteryFacetInstance","LotteryFacet","to","exact","path","component","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2aed447e.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.request({ method: 'eth_requestAccounts' });\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from 'react'\nimport \"./styles/Pages.css\"\n\n\n\nexport default class Home extends React.Component {\n    state = {supplies: []}\n\n    componentDidMount = async () => {\n        const {\n            dixelFacet,\n            accounts\n        } = this.props;\n        let result = await dixelFacet.methods.returnSupplies().call();\n        let supplies = [\n            (800 - result[1]),\n            (150 - (result[2] - result[1])),\n            (45 - (result[3] -result[2])),\n            (5 -(result[4] - result[3])),\n            result[7],\n        ];\n        let account = accounts[0]\n        console.log(result)\n        console.log(supplies)\n        this.setState({supplies, account})\n    }\n\n\n    render() {\n        return (\n            <div>\n                <p> account: {this.state.account}</p>\n                <div>\n                    <p>common: {this.state.supplies[0]}</p>\n                    <p>uncommon: {this.state.supplies[1]}</p>\n                    <p>rare: {this.state.supplies[2]}</p>\n                    <p>legendary:{this.state.supplies[3]}</p>\n                    <p>collectors:{this.state.supplies[4]}</p>\n\n                </div>\n            </div>\n        )\n    }\n}\n\n// uint256 dixSupply;\n//         uint256 commonSupply;\n//         uint256 uncommonSupply;\n//         uint256 rareSupply;\n//         uint256 legendarySupply;\n//         uint256 mintedSupply;\n//         uint256 lotterySupply;\n//         uint256 collectorsSupply;\n//         uint256 availableToGen;","import React from 'react'\nimport jsonData from './addresses.json'\nimport \"./styles/Pages.css\"\n\nexport default class MintPage extends React.Component {\n        state = {\n            showMint: \"no\",\n            mintedDixel: null,\n            mintedURI: \"\",\n            freeMintTickets: 0\n        }\n\n        componentDidMount = async () => {\n            this.setState(this.fetchFreeTickets())\n        }\n\n        random = (modulus) => {\n            let array = new Uint32Array(10);\n            let randArray = window.crypto.getRandomValues(array);\n            let rand1 = Math.floor(Math.random() * 100)\n            let rand2 = randArray[rand1 % randArray.length]\n            return rand2 % modulus\n        }\n\n        fetchFreeTickets = async () => {\n            const {\n                lotteryFacet,\n                accounts\n            } = this.props;\n\n            let freeMintTickets = await lotteryFacet.methods.returnFreeMintTickets().call({\n                from: accounts[0]\n            })\n\n            this.setState({\n                freeMintTickets\n            })\n        }\n\n        mintDixel = async (choice) => {\n            const {\n                dixelFacet,\n                accounts\n            } = this.props;\n            this.setState({\n                showMint: \"loading\"\n            })\n            let dixels = await dixelFacet.methods.getDixels().call();\n            let addressesArray = []\n            let commonAvailable = jsonData.common;\n            let uncommonAvailable = jsonData.uncommon;\n            let rareAvailable = jsonData.rare;\n            let legendaryAvailable = jsonData.legendary;\n\n            dixels.forEach(e => {\n                if (Number(e.rarity) === 1) {\n                    for (let i = 0; i < jsonData.common.length; i++) {\n                        if (jsonData.common[i][0] === e.URI) {\n                            commonAvailable.splice(i, 1)\n                        }\n                    }\n                }\n                if (Number(e.rarity) === 2) {\n                    for (let i = 0; i < jsonData.uncommon.length; i++) {\n                        if (jsonData.uncommon[i][0] === e.URI) {\n                            uncommonAvailable.splice(i, 1)\n                        }\n                    }\n                }\n                if (Number(e.rarity) === 3) {\n                    for (let i = 0; i < jsonData.rare.length; i++) {\n                        if (jsonData.rare[i][0] === e.URI) {\n                            rareAvailable.splice(i, 1)\n                        }\n                    }\n                }\n                if (Number(e.rarity) === 4) {\n                    for (let i = 0; i < jsonData.legendary.length; i++) {\n                        if (jsonData.legendary[i][0] === e.URI) {\n                            legendaryAvailable.splice(i, 1)\n                        }\n                    }\n                }\n            })\n\n            let dixel;\n            let currentPrice = await dixelFacet.methods.getDixelPrice().call();\n            let commonChoice = this.random(commonAvailable.length)\n            let uncommonChoice = this.random(uncommonAvailable.length)\n            let rareChoice = this.random(rareAvailable.length)\n            let legendaryChoice = this.random(legendaryAvailable.length)\n            addressesArray.push(commonAvailable[commonChoice], uncommonAvailable[uncommonChoice], rareAvailable[rareChoice], legendaryAvailable[legendaryChoice])\n            \n            if (choice === 1) {\n                await dixelFacet.methods.mintDixel(addressesArray).send({\n                        from: accounts[0],\n                        value: currentPrice\n                    })\n                    .on(\"receipt\", (receipt) => {\n                        dixel = receipt.events.DixelMinted.returnValues._dixel  \n                    })\n                    .catch((error) => {\n                        this.setState({\n                            showMint: \"no\"\n                        })\n                        if (error.code === 4001) {\n                            return alert(\"transaction rejected\")\n                        } else if (error.code === -32603) {\n                            if (error.message.includes(\"Mint ended\")) {\n                                return alert(\"The sale has ended !\")\n                            }\n                            else return alert(\"internal error\")\n                        } else {\n                            console.log(error)\n                        }\n                    })\n            } else if (choice === 2) {\n                if(Number(this.state.freeMintTickets) === 0){\n                    this.setState({showMint: \"no\"})\n                    return alert(\"You don't have tickets\")\n                }\n                await dixelFacet.methods.mintFreeDixel(addressesArray).send({\n                        from: accounts[0]\n                    })\n                    .on(\"receipt\", (receipt) => {\n                        dixel = receipt.events.DixelMinted.returnValues._dixel\n                    })\n                    .catch((error) => {\n                        this.setState({\n                            showMint: \"no\"\n                        })\n                        if (error.code === 4001) {\n                            return alert(\"transaction rejected\")\n                        } else if (error.code === -32603) {\n                            if (error.message.includes(\"no tickets\")) {\n                                return alert(\"you don't have a ticket\")\n                            } else {\n                                return alert(\"internal error\")\n                            }\n                        } else console.log(error)\n                    })\n                    await this.fetchFreeTickets()\n            }\n            if (dixel !== undefined){\n            let jsonURI = dixel.URI\n            let jsonPage;\n            await fetch(`https://ipfs.io/ipfs/${jsonURI}`)\n            .then(async response => jsonPage = await response.json())\n            \n            this.setState({\n                mintedDixel: dixel,\n                showMint: \"yes\",\n                imageURI: jsonPage.image\n            })\n            } else {console.log(\"no dixel found\")}\n        };\n\n    render() {\n        let image;\n        if(this.state.showMint === \"no\") image = null;\n        if(this.state.showMint === \"loading\") image = <img src=\"https://ipfs.io/ipfs/QmYeQUra7rkT4KMdV4KwSk51KxkkDuBG1Tm5R96zR2FxQj\" alt=\"loading\"/>;\n        if(this.state.showMint === \"yes\") image = <div>\n        <img src={this.state.imageURI} alt=\"Dixel.png\" />\n        <p>rarity:  {this.state.mintedDixel.rarity}\n        </p>\n\n    </div>;\n        return (\n            <div>\n                <h1> Minting page </h1>\n                <p>free mint tickets: {this.state.freeMintTickets}</p>\n                <div>{image}</div>\n                <div>\n                    <button onClick={() => this.mintDixel(1)}>Mint</button>\n                    <button onClick={() => this.mintDixel(2)}>Mint with ticket</button>\n                </div>\n                \n            </div>\n        )\n    }\n}","import React from 'react'\nimport \"./styles/Pages.css\"\n\nexport default class StakingPage extends React.Component {\n    state = { stakedDixels: [], unStakedDixels: [], userStarmBalance: 0 }\n\n    componentDidMount = () => {\n        this.setState(this.updateAll());\n    }\n\n    componentWillUnmount = () => {\n        this.setState({\n            stakedDixels: [], \n            unStakedDixels: [], \n            userStarmBalance: 0\n        })\n    }\n    updateAll = async () => {\n        const { lotteryFacet, dixelFacet, accounts } = this.props;\n        let starmBalance = await lotteryFacet.methods.balanceOfStarm(accounts[0]).call();\n        let dixels = await dixelFacet.methods.getDixels().call();\n        let length = dixels.length;\n        let userDixels = [];\n        let stakedDixels = []\n        let unStakedDixels = []\n\n        for (let i = 0; i <= length - 1; i++) {\n            if ((await dixelFacet.methods.ownerOf(i).call()) === accounts[0]) {\n                let obj = {}\n                let jsonPage\n                obj.dixel = dixels[i]\n                obj.id = i;\n                await fetch(`https://ipfs.io/ipfs/${obj.dixel.URI}`)\n                .then(async response => jsonPage = await response.json())\n                obj.imageURI = jsonPage.image\n                obj.dixelTraits = jsonPage.attributes\n                userDixels.push(obj);\n            }\n\n        }\n        unStakedDixels = userDixels.filter(obj => obj.dixel.staked === false)\n        stakedDixels = userDixels.filter(obj => obj.dixel.staked === true)\n\n        this.setState({ stakedDixels: stakedDixels, unStakedDixels: unStakedDixels, userStarmBalance: starmBalance });\n    };\n\n\n\n    stakeDixel = async (value) => {\n        let { dixelFacet, accounts } = this.props;\n        await dixelFacet.methods.stakeDix(value).send({ from: accounts[0] }).catch((error) => {\n            if (error.code === 4001) {\n                return alert(\"transaction rejected\")\n            } else if (error.code === -32603) {\n                if (error.message.includes(\"staking\")) {\n                    return alert(\"This dixel is already staked !\")\n                }\n            } else {\n                return alert(\"internal error\")\n            }\n        })\n        await this.updateAll()\n    }\n\n    unStakeDixel = async (value) => {\n        let { dixelFacet, accounts } = this.props;\n        await dixelFacet.methods.unStakeDix(value).send({ from: accounts[0] })\n        .catch((error) => {\n            if (error.code === 4001) {\n                return alert(\"transaction rejected\")\n            } else if (error.code === -32603) {\n                if (error.message.includes(\"not staked\")) {\n                    return alert(\"This dixel isn't staked !\")\n                }\n            } else {\n            return alert(\"internal error\")\n            }\n        })\n        await this.updateAll()\n        this.setState(this.updateAll())\n    }\n\n    levelUpDixel = async (value) => {\n        const { dixelFacet, accounts } = this.props;\n\n        await dixelFacet.methods.levelUp(value).send({ from: accounts[0] })\n        .catch((error) => {\n            if (error.code === 4001) {\n                return alert(\"transaction rejected\")\n            } else if (error.code === -32603) {\n                if (error.message.includes(\"max lvl\")) {\n                    return alert(\"This this dixel is already at the maximul level !\")\n                } else if (error.message.includes(\"limit reached\")) {\n                    return alert(\"All the collectors have been minted :'(\")\n                }\n            } else {\n                return alert(\"internal error\")\n            }\n        })\n        await this.updateAll()\n        this.setState(this.updateAll())\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    Starm balance: {this.state.userStarmBalance}\n                </div>\n                <div>\n                <p>unstaked Dixels :</p>\n                <div className=\"card-list\">\n                {this.state.unStakedDixels.map((obj, i) => <div key={i} className=\"card\">\n                    <div className={\"space-b card-list\"}>\n                    <div>rarity: {obj.dixel.rarity}</div>\n                    <div >level: {obj.dixel.level}</div>\n                    </div>\n                    \n                    <img src={obj.imageURI} className=\"image\" alt=\"dixel.png\" />\n                    <div>\n                    <button onClick={() => this.stakeDixel(this.state.unStakedDixels[i].id)}>Stake</button>\n                    <button onClick={() => this.levelUpDixel(obj.id)}>level up</button>\n                    </div>\n                    \n                </div>)}\n                </div>\n                </div>\n                <p>Staked Dixels :</p>\n                <div className=\"card-list\">\n                    \n                {this.state.stakedDixels.map((obj, i) => <div key={i} className=\"card\">\n                    <div className=\"card-list space-b\">\n                    <div>rarity: {obj.dixel.rarity}</div>\n                    <div >level: {obj.dixel.level}</div>\n                    </div>\n                    <img src={obj.imageURI} className=\"image\" alt=\"dixel.png\" />\n                    <p>starm to withdraw :  {(Math.round(new Date().getTime()/ 1000) - obj.dixel.stakeInitTime)* obj.dixel.rarity * obj.dixel.level}</p>\n                    <div>\n                    <button onClick={() => this.unStakeDixel(this.state.stakedDixels[i].id)}>Unstake</button>\n                    </div>\n                </div>)}\n                </div>\n\n                \n            </div>\n        )\n    }\n}","import React from 'react'\nimport \"./styles/Pages.css\"\n\nexport default class LotteryPage extends React.Component {\n        state = {\n            dailyWinners: [],\n            userDixelTickets: 0,\n            userStarmToWithdraw: 0,\n            userStarmBalance: 0,\n            userLotteryTickets: 0,\n            registeredTickets: 0,\n            value: 0\n        }\n\n        componentDidMount = () => {\n            this.setState(this.updateAll)\n        }\n\n        updateAll = async () => {\n            let {\n                lotteryFacet,\n                accounts\n            } = this.props\n            let dailyWinners = await lotteryFacet.methods.returnLotteryWinners().call()\n            let lotteryTickets = await lotteryFacet.methods.returnLotteryTickets().call({\n                from: accounts[0]\n            })\n            let dixelTickets = await lotteryFacet.methods.returnFreeMintTickets().call({\n                from: accounts[0]\n            })\n            let registeredTickets = await lotteryFacet.methods.returnRegisteredTickets().call({\n                from: accounts[0]\n            })\n            let starmToWithdraw = await lotteryFacet.methods.returnStarmWon().call({\n                from: accounts[0]\n            })\n            let starmBalance = await lotteryFacet.methods.balanceOfStarm(accounts[0]).call({\n                from: accounts[0]\n            })\n\n            this.setState({\n                dailyWinners: dailyWinners,\n                userDixelTickets: dixelTickets,\n                registeredTickets: registeredTickets,\n                userStarmToWithdraw: starmToWithdraw,\n                userStarmBalance: starmBalance,\n                userLotteryTickets: lotteryTickets\n            })\n        }\n\n        buyTickets = async (amount) => {\n            let {\n                lotteryFacet,\n                accounts\n            } = this.props\n            await lotteryFacet.methods.buyTicket(amount).send({\n                from: accounts[0]\n            }).catch((error) => {\n                if(error.code === 4001){\n                    return alert(\"transaction rejected\")\n                } else if (error.code === -32603){\n                    if(error.message.includes(\"starm balance\")) {\n                        return alert(\"You don't have enough starm !\")\n                    } else return alert(\"internal error\")\n                } else return error\n            })\n            await this.updateAll()\n        }\n\n        registerForLottery = async (amount) => {\n            let {\n                lotteryFacet,\n                accounts\n            } = this.props\n            await lotteryFacet.methods.registerForLottery(amount).send({\n                from: accounts[0]\n            }).catch((error) => {\n                if(error.code === 4001) alert(\"transaction rejected\")\n                else if (error.code === -32603) {\n                    if(error.message.includes(\"not enough tickets\")) alert(\"You don't have enough tickets\")\n                    else return alert(\"internal error\")\n                } else return console.log(error)\n            })\n            await this.updateAll()\n        }\n\n        startLottery = async () => {\n            let {\n                lotteryFacet,\n                accounts\n            } = this.props\n            await lotteryFacet.methods.startLottery().send({\n                from: accounts[0]\n            })\n            .catch((error) => {\n                if(error.code === 4001) alert(\"transaction rejected\")\n                else if(error.code === -32603){\n                    if(error.message.includes(\"not enough players\")) return alert(\"They're are not enough enough players yet\")\n                    else return alert(\"internal error\")\n                } else return console.log(error)\n            })\n            await this.updateAll()\n        }\n\n        handleChange = (event) => {\n            this.setState({\n                value: event.target.value\n            });\n        }\n\n        withdrawStarm = async () => {\n            let {\n                lotteryFacet,\n                accounts\n            } = this.props;\n            await lotteryFacet.methods.withdrawLotteryStarm().send({\n                from: accounts[0]\n            })\n            .on(\"receipt\", (receipt) => {\n                let returnValues = receipt.events.StarmClaimed.returnValues\n                console.log(returnValues)\n            })\n            .catch((error) => {\n                if(error.code === 4001) return alert(\"transaction rejected\")\n                else if(error.code === -32603){\n                    if(error.message.includes(\"no starm\")) alert(\"You don't have starm to withdraw\")\n                    else return alert(\"internal error\")\n                } else return console.log(error)\n            })\n            await this.updateAll()\n        }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <div>Lottery tickets: {this.state.userLotteryTickets}</div>\n                    <div>Free Mint Tickets: {this.state.userDixelTickets}</div>\n                    <div>Registered Tickets: {this.state.registeredTickets}</div>\n                    <div>\n                        <p>Starm to withdraw: {this.state.userStarmToWithdraw}</p>\n                    </div>\n                    <div>starm balance: {this.state.userStarmBalance}</div>\n                </div>\n                Lottery\n\n                    <div>\n                    <label>\n                        How many tickets would you like to buy ?:\n                            <select value={this.state.numTickets} onChange={this.handleChange}>\n                            <option value={1}>1</option>\n                            <option value={2}>2</option>\n                            <option value={3}>3</option>\n                            <option value={4}>4</option>\n                            <option value={5}>5</option>\n                            <option value={10}>10</option>\n                            <option value={20}>20</option>\n                            <option value={50}>50</option>\n                        </select>\n                        <button onClick={() => this.buyTickets(this.state.value)}>Buy Ticket</button>\n                    </label>                        \n                    </div>\n                    <div>\n                    <label>\n                        How many tickets would you like to register ?:\n                            <select value={this.state.numTickets} onChange={this.handleChange}>\n                            <option value={1}>1</option>\n                            <option value={2}>2</option>\n                            <option value={3}>3</option>\n                            <option value={4}>4</option>\n                            <option value={5}>5</option>\n                            <option value={10}>10</option>\n                            <option value={20}>20</option>\n                            <option value={50}>50</option>\n                        </select>\n                        <button onClick={() => this.registerForLottery(this.state.value)}>Register</button>\n                    </label>                        \n                    </div>\n\n                <button onClick={this.startLottery}>Start lottery</button>\n                <button onClick={this.withdrawStarm}>WithdrawStarm</button>\n\n                <div className='card-list'>\n                    daily winners: \n                {this.state.dailyWinners.slice(1, this.state.dailyWinners.length).map((e, i) => \n                    <div key={i} className=\"card\">\n                        <p>at: {e.timestamp}</p>\n                        <p>free dixel winner: {e.dixelMintWinner}</p>\n                        <p>Starm winner: {e.starmWinner}</p>\n                    </div>\n                )}\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react'\nimport \"./styles/Pages.css\"\n\nexport default class InventoryAndLevel extends React.Component {\n        state = {\n            userDixels: [],\n            starmBalance: 0,\n            value: 0,\n            show: false\n        }\n\n        componentDidMount = () => {\n            this.setState(this.fetchUserDixels())\n        }\n\n        fetchUserDixels = async () => {\n            const {\n                dixelFacet,\n                lotteryFacet,\n                accounts\n            } = this.props;\n\n            let dixels = await dixelFacet.methods.getDixels().call();\n            let length = dixels.length - 1;\n            let starmBalance = await lotteryFacet.methods.balanceOfStarm(accounts[0]).call()\n            let userDixels = [];\n\n            for (let i = 0; i <= length; i++) {\n                if ((await dixelFacet.methods.ownerOf(i).call()) === accounts[0]) {\n                    let obj = {}\n                    let jsonPage\n                    obj.dixel = dixels[i]\n                    obj.id = i\n                    await fetch(`https://ipfs.io/ipfs/${obj.dixel.URI}`)\n                    .then(async response => jsonPage = await response.json())\n                    obj.imageURI = jsonPage.image\n                    obj.dixelTraits = jsonPage.attributes\n                    userDixels.push(obj);\n                }\n            }\n            this.setState({\n                userDixels: userDixels,\n                starmBalance: starmBalance\n            });\n        };\n\n        filter = async (value) => {\n            await this.fetchUserDixels()\n            let dixels = this.state.userDixels\n            let filteredDixels = []\n\n            if(Number(value) === 1) filteredDixels = dixels.filter(e => Number(e.dixel.rarity) === 1)\n            else if(Number(value) === 2) filteredDixels = dixels.filter(e => Number(e.dixel.rarity) === 2)\n            else if(Number(value) === 3) filteredDixels = dixels.filter(e => Number(e.dixel.rarity) === 3)\n            else if(Number(value) === 4) filteredDixels = dixels.filter(e => Number(e.dixel.rarity) === 4)\n            else if(Number(value) === 5) filteredDixels = dixels.filter(e => Number(e.dixel.level) === 1)\n            else if(Number(value) === 6) filteredDixels = dixels.filter(e => Number(e.dixel.level) === 2)\n            else if(Number(value) === 7) filteredDixels = dixels.filter(e => Number(e.dixel.level) === 3)\n            else if(Number(value) === 8) filteredDixels = dixels.filter(e => Boolean(e.dixel.staked) === false)\n            else if(Number(value) === 9) filteredDixels = dixels.filter(e => Boolean(e.dixel.staked) === true)\n            else alert(\"command not recognized\")\n            this.setState({\n                userDixels: filteredDixels\n            })\n        }\n\n        handleChange = (event) => {\n            this.setState({\n                value: event.target.value\n            });\n        }\n\n        displayAttributes = (attr) => {\n            console.log(attr)\n            console.log(\"head: \", attr[0].value)\n            console.log(\"eyes: \", attr[1].value)\n            console.log(\"mouth: \", attr[2].value)\n            \n        }\n\n        handleMouseEnter = (e) => {\n            e.target.style.cursor = \"zoom-in\" \n        }\n\n    render() {\n        return (\n            <div>\n                <p>starm balance: {this.state.starmBalance}</p>\n                <p>Inventory</p>\n                \n                <label>\n                            <select value={this.state.value} onChange={this.handleChange}>\n                            <option value={0}>Select filter: </option> \n                            <option value={1}>common</option>\n                            <option value={2}>uncommon</option>\n                            <option value={3}>rare</option>\n                            <option value={4}>legendary</option>\n                            <option value={5}>Level 1</option>\n                            <option value={6}>level 2</option>\n                            <option value={7}>level 3</option>\n                            <option value={8}>collectors</option>\n                            <option value={9}>staked</option>\n                            <option value={10}>not staked</option>\n                        </select>\n                        <button onClick={() => this.filter(this.state.value)}>Filter</button>\n                        </label> \n                        <div className=\"card-list\">\n                        {this.state.userDixels.map((obj, i) => \n                    <div key={i} \n                    className=\"card\" \n                    onClick={() => this.displayAttributes(obj.dixelTraits)}\n                    onMouseEnter={this.handleMouseEnter}>\n                    <img src={obj.imageURI} className=\"image\" alt=\"dixel.png\" />\n                    <p>rarity : {obj.dixel.rarity}</p>\n                    <p>level: {obj.dixel.level}</p>\n                    <p>staked: {(obj.dixel.staked).toString()}</p>\n                </div>)}\n                        </div>\n                \n            </div>\n        )\n    }\n}","import React, { Component } from \"react\";\nimport getWeb3 from \"./getWeb3\";\nimport DiamondContract from \"./contracts/Diamond.json\";\nimport DixelFacet from \"./contracts/DixelFacet.json\";\nimport LotteryFacet from \"./contracts/LotteryFacet.json\";\n\nimport Home from \"./components/pages/Home\";\nimport MintPage from \"./components/pages/Mint\";\nimport StakingPage from \"./components/pages/Stake\";\nimport LotteryPage from \"./components/pages/Lottery\";\nimport InventoryAndLevel from \"./components/pages/Inventory\";\n\nimport {\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { web3: null, accounts: null, contract: null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n\n      // Use web3 to get the user's accounts.\n      let accounts = await web3.eth.getAccounts();\n\n      window.ethereum.on('accountsChanged',async function () {\n        //reloads interface with accounts[0]\n        accounts = await web3.eth.getAccounts();\n        window.location.reload();\n      })\n\n      // Get the diamond contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = DiamondContract.networks[networkId];\n\n      //Dixel facet\n      const dixelFacetInstance = new web3.eth.Contract(\n        DixelFacet.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n\n      //Lottery facet\n      const lotteryFacetInstance = new web3.eth.Contract(\n        LotteryFacet.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state\n      this.setState({ web3, accounts, dixelFacet: dixelFacetInstance, lotteryFacet: lotteryFacetInstance });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <div>\n          <nav className=\"Navig\">\n            <ul>\n              <li className=\"home\">\n              <Link to=\"/\">Home</Link>\n              </li>\n              <li>\n              <Link to=\"/stake\">Stake</Link>\n              </li>\n              <li>\n              <Link to=\"/lottery\">Lottery</Link>\n              </li>\n              <li>\n              <Link to=\"/mint\">Mint</Link>\n              </li>\n              <li>\n              <Link to=\"/inventory\">Inventory</Link>\n              </li>\n            </ul>\n          </nav>\n          <Switch>\n              <Route exact path=\"/\" component={() => <Home accounts={this.state.accounts} dixelFacet={this.state.dixelFacet}/>}/>\n              <Route path=\"/mint\" component={() => <MintPage accounts={this.state.accounts} dixelFacet={this.state.dixelFacet} lotteryFacet={this.state.lotteryFacet} web3={this.state.web3}/>}/>\n              <Route path=\"/stake\" component ={() => <StakingPage accounts={this.state.accounts} dixelFacet={this.state.dixelFacet} lotteryFacet={this.state.lotteryFacet}/>}/>\n              <Route path=\"/lottery\" component={() => <LotteryPage accounts={this.state.accounts} dixelFacet={this.state.dixelFacet} lotteryFacet={this.state.lotteryFacet}/>}/>\n              <Route path=\"/inventory\" component={() => <InventoryAndLevel accounts={this.state.accounts} dixelFacet={this.state.dixelFacet} lotteryFacet={this.state.lotteryFacet}/>}/>\n            </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\n\nReactDOM.render(\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>, \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}